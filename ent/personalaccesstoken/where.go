// Code generated by entc, DO NOT EDIT.

package personalaccesstoken

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hsndmr/go-sanctum/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToken), v))
	})
}

// Abilities applies equality check predicate on the "abilities" field. It's identical to AbilitiesEQ.
func Abilities(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAbilities), v))
	})
}

// ExpirationAt applies equality check predicate on the "expiration_at" field. It's identical to ExpirationAtEQ.
func ExpirationAt(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpirationAt), v))
	})
}

// LastUsedAt applies equality check predicate on the "last_used_at" field. It's identical to LastUsedAtEQ.
func LastUsedAt(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastUsedAt), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PersonalAccessToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PersonalAccessToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToken), v))
	})
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldToken), v))
	})
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.PersonalAccessToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldToken), v...))
	})
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.PersonalAccessToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldToken), v...))
	})
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldToken), v))
	})
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldToken), v))
	})
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldToken), v))
	})
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldToken), v))
	})
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldToken), v))
	})
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldToken), v))
	})
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldToken), v))
	})
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldToken), v))
	})
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldToken), v))
	})
}

// AbilitiesEQ applies the EQ predicate on the "abilities" field.
func AbilitiesEQ(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAbilities), v))
	})
}

// AbilitiesNEQ applies the NEQ predicate on the "abilities" field.
func AbilitiesNEQ(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAbilities), v))
	})
}

// AbilitiesIn applies the In predicate on the "abilities" field.
func AbilitiesIn(vs ...string) predicate.PersonalAccessToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAbilities), v...))
	})
}

// AbilitiesNotIn applies the NotIn predicate on the "abilities" field.
func AbilitiesNotIn(vs ...string) predicate.PersonalAccessToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAbilities), v...))
	})
}

// AbilitiesGT applies the GT predicate on the "abilities" field.
func AbilitiesGT(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAbilities), v))
	})
}

// AbilitiesGTE applies the GTE predicate on the "abilities" field.
func AbilitiesGTE(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAbilities), v))
	})
}

// AbilitiesLT applies the LT predicate on the "abilities" field.
func AbilitiesLT(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAbilities), v))
	})
}

// AbilitiesLTE applies the LTE predicate on the "abilities" field.
func AbilitiesLTE(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAbilities), v))
	})
}

// AbilitiesContains applies the Contains predicate on the "abilities" field.
func AbilitiesContains(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAbilities), v))
	})
}

// AbilitiesHasPrefix applies the HasPrefix predicate on the "abilities" field.
func AbilitiesHasPrefix(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAbilities), v))
	})
}

// AbilitiesHasSuffix applies the HasSuffix predicate on the "abilities" field.
func AbilitiesHasSuffix(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAbilities), v))
	})
}

// AbilitiesIsNil applies the IsNil predicate on the "abilities" field.
func AbilitiesIsNil() predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAbilities)))
	})
}

// AbilitiesNotNil applies the NotNil predicate on the "abilities" field.
func AbilitiesNotNil() predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAbilities)))
	})
}

// AbilitiesEqualFold applies the EqualFold predicate on the "abilities" field.
func AbilitiesEqualFold(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAbilities), v))
	})
}

// AbilitiesContainsFold applies the ContainsFold predicate on the "abilities" field.
func AbilitiesContainsFold(v string) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAbilities), v))
	})
}

// ExpirationAtEQ applies the EQ predicate on the "expiration_at" field.
func ExpirationAtEQ(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpirationAt), v))
	})
}

// ExpirationAtNEQ applies the NEQ predicate on the "expiration_at" field.
func ExpirationAtNEQ(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpirationAt), v))
	})
}

// ExpirationAtIn applies the In predicate on the "expiration_at" field.
func ExpirationAtIn(vs ...time.Time) predicate.PersonalAccessToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExpirationAt), v...))
	})
}

// ExpirationAtNotIn applies the NotIn predicate on the "expiration_at" field.
func ExpirationAtNotIn(vs ...time.Time) predicate.PersonalAccessToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExpirationAt), v...))
	})
}

// ExpirationAtGT applies the GT predicate on the "expiration_at" field.
func ExpirationAtGT(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpirationAt), v))
	})
}

// ExpirationAtGTE applies the GTE predicate on the "expiration_at" field.
func ExpirationAtGTE(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpirationAt), v))
	})
}

// ExpirationAtLT applies the LT predicate on the "expiration_at" field.
func ExpirationAtLT(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpirationAt), v))
	})
}

// ExpirationAtLTE applies the LTE predicate on the "expiration_at" field.
func ExpirationAtLTE(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpirationAt), v))
	})
}

// LastUsedAtEQ applies the EQ predicate on the "last_used_at" field.
func LastUsedAtEQ(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastUsedAt), v))
	})
}

// LastUsedAtNEQ applies the NEQ predicate on the "last_used_at" field.
func LastUsedAtNEQ(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastUsedAt), v))
	})
}

// LastUsedAtIn applies the In predicate on the "last_used_at" field.
func LastUsedAtIn(vs ...time.Time) predicate.PersonalAccessToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastUsedAt), v...))
	})
}

// LastUsedAtNotIn applies the NotIn predicate on the "last_used_at" field.
func LastUsedAtNotIn(vs ...time.Time) predicate.PersonalAccessToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastUsedAt), v...))
	})
}

// LastUsedAtGT applies the GT predicate on the "last_used_at" field.
func LastUsedAtGT(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastUsedAt), v))
	})
}

// LastUsedAtGTE applies the GTE predicate on the "last_used_at" field.
func LastUsedAtGTE(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastUsedAt), v))
	})
}

// LastUsedAtLT applies the LT predicate on the "last_used_at" field.
func LastUsedAtLT(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastUsedAt), v))
	})
}

// LastUsedAtLTE applies the LTE predicate on the "last_used_at" field.
func LastUsedAtLTE(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastUsedAt), v))
	})
}

// LastUsedAtIsNil applies the IsNil predicate on the "last_used_at" field.
func LastUsedAtIsNil() predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastUsedAt)))
	})
}

// LastUsedAtNotNil applies the NotNil predicate on the "last_used_at" field.
func LastUsedAtNotNil() predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastUsedAt)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PersonalAccessToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PersonalAccessToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PersonalAccessToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PersonalAccessToken {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PersonalAccessToken) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PersonalAccessToken) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PersonalAccessToken) predicate.PersonalAccessToken {
	return predicate.PersonalAccessToken(func(s *sql.Selector) {
		p(s.Not())
	})
}
